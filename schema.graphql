# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UsersCount {
  list: Int!
}

type Users {
  id: ID!

  """@Validator.@IsEmail()"""
  email: String!
  name: String!
  list: [List!]
  _count: UsersCount!
}

type List {
  id: ID!
  title: String!
  deadline: String!
  done: Boolean!
  user: Users!
  user_id: Int!
}

type LoginResponse {
  access_token: String!
  users: Users!
}

type Query {
  readOne(where: ListWhereInput, orderBy: [ListOrderByWithRelationInput!], cursor: ListWhereUniqueInput, take: Int, skip: Int, distinct: [ListScalarFieldEnum!]): List!
  readAll(where: ListWhereInput, orderBy: [ListOrderByWithRelationInput!], cursor: ListWhereUniqueInput, take: Int, skip: Int, distinct: [ListScalarFieldEnum!]): [List!]!
  findUser(where: UsersWhereUniqueInput!): Users!
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IntFilter
  title: StringFilter
  deadline: StringFilter
  done: BoolFilter
  user: UsersRelationFilter
  user_id: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UsersRelationFilter {
  is: UsersWhereInput
  isNot: UsersWhereInput
}

input UsersWhereInput {
  AND: [UsersWhereInput!]
  OR: [UsersWhereInput!]
  NOT: [UsersWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
  list: ListListRelationFilter
}

input ListListRelationFilter {
  every: ListWhereInput
  some: ListWhereInput
  none: ListWhereInput
}

input ListOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  deadline: SortOrder
  done: SortOrder
  user: UsersOrderByWithRelationInput
  user_id: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UsersOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
  list: ListOrderByRelationAggregateInput
}

input ListOrderByRelationAggregateInput {
  _count: SortOrder
}

input ListWhereUniqueInput {
  id: Int
}

enum ListScalarFieldEnum {
  id
  title
  deadline
  done
  user_id
}

input UsersWhereUniqueInput {
  id: Int
  email: String
}

type Mutation {
  createList(data: ListCreateInput!): List!
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List!
  deleteList(where: ListWhereUniqueInput!): List!
  createUser(data: UsersCreateInput!): Users!
  deleteUser(where: UsersWhereUniqueInput!): Users!
  updateUser(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users!
  login(loginUserInput: LoginUserInput!): LoginResponse!
}

input ListCreateInput {
  title: String!
  deadline: String!
  done: Boolean
  user: UsersCreateNestedOneWithoutListInput!
}

input UsersCreateNestedOneWithoutListInput {
  create: UsersCreateWithoutListInput
  connectOrCreate: UsersCreateOrConnectWithoutListInput
  connect: UsersWhereUniqueInput
}

input UsersCreateWithoutListInput {
  email: String!
  name: String!
  password: String!
}

input UsersCreateOrConnectWithoutListInput {
  where: UsersWhereUniqueInput!
  create: UsersCreateWithoutListInput!
}

input ListUpdateInput {
  title: StringFieldUpdateOperationsInput
  deadline: StringFieldUpdateOperationsInput
  done: BoolFieldUpdateOperationsInput
  user: UsersUpdateOneRequiredWithoutListInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UsersUpdateOneRequiredWithoutListInput {
  create: UsersCreateWithoutListInput
  connectOrCreate: UsersCreateOrConnectWithoutListInput
  upsert: UsersUpsertWithoutListInput
  connect: UsersWhereUniqueInput
  update: UsersUpdateWithoutListInput
}

input UsersUpsertWithoutListInput {
  update: UsersUpdateWithoutListInput!
  create: UsersCreateWithoutListInput!
}

input UsersUpdateWithoutListInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UsersCreateInput {
  email: String!
  name: String!
  password: String!
  list: ListCreateNestedManyWithoutUserInput
}

input ListCreateNestedManyWithoutUserInput {
  create: [ListCreateWithoutUserInput!]
  connectOrCreate: [ListCreateOrConnectWithoutUserInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateWithoutUserInput {
  title: String!
  deadline: String!
  done: Boolean
}

input ListCreateOrConnectWithoutUserInput {
  where: ListWhereUniqueInput!
  create: ListCreateWithoutUserInput!
}

input UsersUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  list: ListUpdateManyWithoutUserInput
}

input ListUpdateManyWithoutUserInput {
  create: [ListCreateWithoutUserInput!]
  connectOrCreate: [ListCreateOrConnectWithoutUserInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutUserInput!]
  set: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  connect: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ListUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ListScalarWhereInput!]
}

input ListUpsertWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutUserInput!
  create: ListCreateWithoutUserInput!
}

input ListUpdateWithoutUserInput {
  title: StringFieldUpdateOperationsInput
  deadline: StringFieldUpdateOperationsInput
  done: BoolFieldUpdateOperationsInput
}

input ListUpdateWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutUserInput!
}

input ListUpdateManyWithWhereWithoutUserInput {
  where: ListScalarWhereInput!
  data: ListUpdateManyMutationInput!
}

input ListScalarWhereInput {
  AND: [ListScalarWhereInput!]
  OR: [ListScalarWhereInput!]
  NOT: [ListScalarWhereInput!]
  id: IntFilter
  title: StringFilter
  deadline: StringFilter
  done: BoolFilter
  user_id: IntFilter
}

input ListUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
  deadline: StringFieldUpdateOperationsInput
  done: BoolFieldUpdateOperationsInput
}

input LoginUserInput {
  email: String!
  password: String!
}

type Subscription {
  listAdded: List!
  userAdded: Users!
}